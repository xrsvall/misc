#!/bin/bash

set -eu
set -o pipefail
set -o errtrace
trap 'printf "ERROR@%s:%d\n" "${BASH_SOURCE}" "${BASH_LINENO}" 1>&2' ERR

### global variabels

DBUG=0
WRAP=()

### print argument to stderr if BDUG > first argument

dbug() { 
  level=$1
  shift
  if [[ "$DBUG" -gt "$level" ]]
  then
    printf "%s\n" "$*" >&2; 
  fi
}

### parse internal debug options

while [[ $# -gt 0 && $1 =~ ^-d ]]
do
  if [[ $DBUG -eq 0 && $1 =~ ^-d[0-9]$ ]]
  then
    DBUG=$(sed "s@^-d@@" <<< "$1")
  else
    DBUG="-1+${#1}"
  fi
  dbug 0 "DBUG = $DBUG"

  shift
  [[ $DBUG -gt 2 ]] && WRAP+=("GIT_TRACE=1")
  [[ $DBUG -gt 3 ]] && WRAP+=("GIT_TRACE_PERFORMANCE=1")
  [[ $DBUG -gt 4 ]] && WRAP+=("GIT_TRACE_SETUP=1")
done

### get the root dir of the git repo from the command line arguments

gitroot=.

for arg in "$@"
do
  if [[ -f $arg || -d $arg ]]
  then
    dbug 0 "valid path! = $arg"
    gitroot=$arg
    if [[ ! -d $gitroot ]]
    then
      gitroot=$(dirname "$arg")
    fi
    cmd1="git -C $gitroot rev-parse --show-toplevel"
    dbug 1 "$cmd1"
    gitroot=$($cmd1)
    break
  fi
done

gitrootR=$(python -c "import os.path; print os.path.relpath('$gitroot', '$(pwd)')")

dbug 0 "$gitroot == $gitrootR"

### modify command line arguments

argA=()
for arg in "$@"
do
  if [[ "$gitrootR" == "." ]]
  then
    dbug 1 "do nothing as gitrootR == ."
    arg1=$arg
  else
    arg1=$(sed "s@$gitrootR@@" <<< "$arg")
  fi
  arg1=${arg1:-.}
  if [[ "$arg1" =~ ^[/] ]]
  then
    if [[ "$arg1" == "/" ]]
    then
      arg1='.'
    else
      dbug 1 "strip / from start"
      arg1=$(sed "s@^/@@" <<< "$arg1")
    fi
  fi
  dbug 0 "$arg -> $arg1"
  argA+=($arg1)
done
dbug 0 ${#argA[@]}

### execute modified command




cmd=("${WRAP[@]+"${WRAP[@]}"}" git -C "$gitrootR" "${argA[@]}")

dbug 1 "argument size = " ${#cmd[@]}
dbug 0 "command = ${cmd[*]}"

exec env "${cmd[@]}"
